/*Instead of copy and paste the same colors over and over again, we placed them in variables*/
:root {
  --border-radius: 3px; /*a variable with global scope*/
}
:root,
[data-selected-theme='green'] {
  --color-background: #a4f3a2;
  --color-text: #034435;
  --color-accent: #00cc66;
}

[data-selected-theme='blue'] {
  --color-background: #55dde0; /*sample of variable with local scope*/
  --color-text: #2b4150;
  --color-accent: #00d4e7;
}

[data-selected-theme='pink'] {
  --color-background: #dfb2f4;
  --color-text: #463546;
  --color-accent: #f06efc;
}

[data-selected-theme='orange'] {
  --color-background: #fa7d61;
  --color-text: #1e1e24;
  --color-accent: #f3601c;
}

* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

body {
  background-color: var(
    --color-background
  ); /*use the css value of the local variable*/
  background: radial-gradient(var(--color-background), var(--color-accent));
  background-size: 200%;
  color: var(--color-text);
  font-family: sans-serif;
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
}

::selection {
  background-color: var(
    --color-accent
  ); /*Selects the portion of an element that is selected by a user*/
}

.container {
  display: block;
  background-color: rgba(255, 255, 255, 0.35);
  padding: 3rem 4rem;
  border: 2px solid var(--color-text);
  box-shadow: 7px 6px 0 0 var(--color-text);
  border-radius: var(--border-radius);
  max-width: 90vw;
  transition: transform 0.35s;
}

/* :has() pseudo-class - a way of selecting a parent element or a previous sibling element 
with respect to a reference element by taking a relative selector list as an argument. Other
words - ability to select a parent element based on the child elements it contains and apply 
styles to the parent.*/
.container:has(button[data-theme]:active) {
  transform: rotateZ(0.35deg);
}

/*Selects container pernt element that contains button[data-theme] element that is the active 
second button[data-theme] element of its parent*/
.container:has(button[data-theme]:nth-of-type(2n):active) {
  transform: rotateZ(-0.35deg);
}

h1 {
  text-align: center;
  font-size: 2.5rem;
  font-weight: 400;
}

p {
  text-align: center;
}

a {
  color: inherit;
  text-decoration-thickness: 2px;
}

a:is(:hover, :focus) {
  text-decoration-thickness: 4px;
}

.theme-switcher {
  display: flex;
  justify-content: center;
  margin: 1.5rem 0 1rem 0;
  font-size: 1.312rem;
}

button {
  margin: 0;
  padding: 0;
  border: none;
  background: transparent;

  padding: 0.75rem 1.25rem;
  font-size: inherit;
  font-size: clamp(1rem, 5vw, 1.312rem);
  color: var(--color-text);
  border: 2px solid var(--color-text);
}

button + button {
  border-left: none;
}

button:first-of-type {
  border-radius: var(--border-radius) 0 0 var(--border-radius);
}

button:last-of-type {
  border-radius: 0 var(--border-radius) var(--border-radius) 0;
}

button:is(:hover, :focus) {
  box-shadow: 0 0 0 2px var(--color-text) inset;
}

@media screen and (max-width: 500px) {
  .container {
    padding: 1rem;
  }

  .theme-switcher {
    display: block;
  }

  button {
    display: block;
    margin: 0 auto;
    border-radius: var(--border-radius);
  }

  button:is(:first-of-type, :last-of-type) {
    border-radius: var(--border-radius);
  }

  button + button {
    border-left: 2px solid var(--color-text);
    margin-top: 1rem;
  }
}
